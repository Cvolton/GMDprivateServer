<?php
if(!class_exists('ExploitPatch')) {
	class ExploitPatch {
		public static function remove($string, $trim = 0) {
			if($trim != 0) return mb_substr(trim(explode(")", str_replace("\0", "", explode("#", explode("~", explode("|", explode(":", trim(htmlspecialchars($string,ENT_QUOTES)))[0])[0])[0])[0]))[0]), 0, $trim);
			else return trim(explode(")", str_replace("\0", "", explode("#", explode("~", explode("|", explode(":", trim(htmlspecialchars($string,ENT_QUOTES)))[0])[0])[0])[0]))[0]);
		}
		public static function charclean($string, $trim = 0) {
			if($trim != 0) return mb_substr(preg_replace("/[^A-Za-z0-9 ]/", '', $string), 0, $trim);
			else return preg_replace("/[^A-Za-z0-9 ]/", '', $string);
		}
		public static function rucharclean($string, $trim = 0) {
			if($trim != 0) return mb_substr(mb_ereg_replace("[^A-Za-zА-Яа-я0-9\[\]\!\.\?\(\)\,\@\#\%\:\*\=\+\-\—ёЁ\/&_ ]", '', $string), 0, $trim);
			else return mb_ereg_replace("[^A-Za-zА-Яа-я0-9\[\]\!\.\?\(\)\,\@\#\%\:\*\=\+\-\—ёЁ\/&_ ]", '', $string);
		}
		public static function numbercolon($string, $trim = 0) {
			if($trim != 0) return mb_substr(preg_replace("/[^0-9,-]/", '', $string), 0, $trim);
			else return preg_replace("/[^0-9,-]/", '', $string);
		}
		public static function number($string, $trim = 0) {
			if($trim != 0) return mb_substr(preg_replace("/[^0-9]/", '', $string), 0, $trim);
			else return preg_replace("/[^0-9]/", '', $string);
		}
		public static function escapedat($string, $trim = 0) {
			if($trim != 0) return mb_substr(strtr($string, ';,|', ':./'), 0, $trim);
			return strtr($string, ';,|', ':./');
		}
		public static function url_base64_decode($data) { // https://github.com/ElfSundae/urlsafe-base64/blob/master/src/helpers.php
			return base64_decode(strtr($data, '-_', '+/'), false);
		}
		public static function url_base64_encode($data) { 
			return strtr(base64_encode($data), ['+' => '-', '/' => '_']);
		}
		public static function prepare_for_checking($string) {
			$string = self::charclean(strtolower(self::translit($string)));
			$lettersToReplace = ['0', '1', '3', '@', 'l', '4', '7', '6', '5'];
			$replaceLetters = ['o', 'i', 'e', 'a', 'i', 'a', 't', 'g', 's'];
			return str_replace(' ', '', mb_ereg_replace('([А-Яа-яA-Za-z0-9 ])\1+', '\1', str_replace($lettersToReplace, $replaceLetters, $string)));
		}
		public static function translit($string) {
			require_once __DIR__.'/../../config/translit/Translit.php';
			return \ashtokalo\translit\Translit::object()->convert(str_replace(['Ё', 'ё'], ['YO', 'yo'], $string), 'ru,uk,mk,be,bg,kk,ka,hy,el,cyrillic,latin');
		}
		public static function gd_escape($string) {
			return strtr(self::rucharclean($string), ':#', ';N');
		}
	}
}
?>
